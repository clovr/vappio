#!/usr/bin/env python
#
# This metric takes the output from get-pipeline-conf and adds
# it as metadata to a tag
#
# Required keys:
# All keys output from the get-pipeline-conf metric
import sys

from igs.utils import functional as func

from vappio.webservice import tag

def pipelineExistsInMetadata(name, targetTag):
    """
    Checks if a tag already has contains configuration metadata
    for a given pipeline.
    """
    return name in targetTag['metadata'].get('pipeline_configs', {})

# Ensure we are dealing with kv pairs
if sys.stdin.readline().strip() != 'kv':
    raise Exception('Header needs to be kv')

# Write our header out
sys.stdout.write('kv\n')

requiredKeys = ['output.TAGS_TO_DOWNLOAD', 'pipeline.PIPELINE_WRAPPER_NAME']

# Iterate over key-value pairs passed in from get-pipeline-conf
metadata = {}
for line in sys.stdin:
    sys.stdout.write(line.strip() + '\n')
    k, v = line.strip().split('=', 1)
    metadata[k] = v

if set(requiredKeys) - set(metadata.keys()):
    raise Exception('Not all required keys present')

tags_to_download = [ s for s in metadata['output.TAGS_TO_DOWNLOAD'].split(',') if s ]
pipelineName = metadata.pop('pipeline.PIPELINE_WRAPPER_NAME')

for download_tag in tags_to_download:
    tagName = pipelineName + "_" + download_tag.strip()

    dTag = tag.listTags('localhost', 'local', {'tag_name': tagName}, True)[0]

    dMetadata = dTag['metadata']
    pipelineMetadata = func.updateDict(metadata.setdefault('pipeline_config', {}).get(pipelineName, {}), dMetadata)
    metadata['pipeline_config'][pipelineName] = pipelineMetadata

    taskName = tag.tagData('localhost',
                           'local',
                           'append',
                           tagName,
                           [],
                           metadata,
                           False,
                           False,
                           None)
