#!/usr/bin/env python
#
# This metric takes the output from get-pipeline-conf and adds
# it as metadata to a tag
#
# Required keys:
# All keys output from the get-pipeline-conf metric
import sys

from vappio.webservice import tag

def pipelineExistsInMetadata(name, targetTag):
    """
    Checks if a tag already has contains configuration metadata
    for a given pipeline.
    """
    pipelineFound = False

    for k in targetTag.keys():
        if k.startswith('metadata.pipeline_configs.' + name + '.'):
            pipelineFound = True

    return pipelineFound

def convertTagMetadataToDict(name, targetTag):
    """
    Takes the metadata found in the object returned
    from queryTag and creates a dictionary out of it
    """
    existingMetadata = {}

    for k in targetTag.keys():
        if k.startswith('metadata.pipeline_configs.' + name + '.'):
            _m, _n, paramName = k.split('.', 3)
            val = targetTag(k)

            existingMetadata[paramName] = val

    return existingMetadata               
            
# Ensure we are dealing with kv pairs
if sys.stdin.readline().strip() != 'kv':
    raise Exception('Header needs to be kv')

# Write our header out
sys.stdout.write('kv\n')

requiredKeys = ['input.TAGS_TO_DOWNLOAD', 'input.PIPELINE_NAME']

# Iterate over key-value pairs passed in from get-pipeline-conf
metadata = {}
for line in sys.stdin:
    sys.stdout.write(line.strip() + '\n')
    k, v = line.strip().split('=', 1)
    metadata[k] = v

if set(requiredKeys) - set(metadata.keys()):
    raise Exception('Not all required keys present')

tags_to_download = [ s for s in metadata['input.TAGS_TO_DOWNLOAD'].split(',') if s ]
pipelineName = metadata.pop('input.PIPELINE_NAME')

# If we have a set of tags to download we can append our config to the tag as metadata
jsonMetadata = {}
for download_tag in tags_to_download:
    tagName = pipelineName + "_" + download_tag.strip()

    tagMetadata = tag.queryTag('localhost', 'local', [tagName])

    # We need to check to see if configuration parameters for this pipeline
    # already exist in our tag metadata   
    if pipelineExistsInMetadata(pipelineName, tagMetadata):
       # If a pipeline exists we have to merge the two dictionaries.
       oldMetadata = convertTagMetadataToDict(pipelineName, tagMetadata)
       oldMetadata.update(metadata)
       metadata = oldMetadata

    # Update the tag to house or new metadata    
    jsonMetadata['pipeline_configs'] = { pipelineName: metadata }
#    print jsonMetadata

    taskName = tag.tagData('localhost', 'local', tagName, None, [], False, False, False, True, False, jsonMetadata)
