#!/usr/bin/env perl

# special key: molecule=[na|aa]

# returns [
# { "message": "message string",
#   "keys": [key1, key2]
#},
#]
use strict;
use warnings;
use JSON::PP;
use Data::Dumper;

# Set seqstat executable
my $seqstat_exec = "/usr/bin/seqstat";

# Grab the header and make sure that were getting kv
# if not, die
chomp( my $header = <> );
die("$0 expects key value pairs ['kv'], not $header") unless( $header eq 'kv' );

# if the user specifies a molecule type
my $molecule;

# holds the key value pairs. All values are assumed files
my %pairs;

# parse input key value pairs.
# Special key is molecule, everything else expected to be a fasta file.
map {
  chomp;
  my ($k,$v) = split(/\s*=\s*/);
  if( $k eq 'molecule' ) {
	$molecule = $1 if( $v =~ /(aa|na)/i );
  } else {
	$pairs{$k} = $v;
  }
} <>;

# cycle through each key value pair and check to see if it's fasta
my @json;
foreach my $key ( keys %pairs ) {
    my $message = &check_fasta( $pairs{$key}, $molecule );
    push(@json, { "message" => $message,"keys" => [ $key ] }) if( $message );
}

#print Dumper(@json);
if( @json > 0 ) {
	print encode_json(\@json);
	exit 1
}

sub check_fasta {
	my ($file, $mol) = @_;
	my $msg;
	
	my $seqstat_cmd = "$seqstat_exec $file";
	open(IN, "$seqstat_cmd |") or die("Can't run cmd $seqstat_cmd");
	while( my $line = <IN> ) {
	    if( $line =~ /Format:\s+(\S+)/ ) {
	        unless( $1 eq 'FASTA' ) {
	            $msg = "File: $file not fasta." unless( $1 eq 'FASTA' );
    	        last;
            }
	    }
	    if( defined( $mol ) && $line =~ /Type.*?(\S+)$/ ) {
	        my $type = ($1 eq 'DNA') ? 'na' : 'aa';
	        if( $type ne $mol ) {
	            $msg = "File: $file first sequence is $type, not $molecule" ;
	            last;
            }
	    }
	}
	close(IN);
	
	return $msg;
}
