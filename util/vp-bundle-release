#!/bin/bash

USAGE="vp-bundle-release [-g size(GB)] [-b bootloader] [-f] [-t] image.img releasename [script1 script2 ...]\n
Creates release-ready VMware (vmdk,vmx) and Virtualbox (ovf,vdi) VMs from a raw disk image, image.img\n
-f force remakes a vmdk even if one already exists. Default is resume using an existing vmdk\n
-t Bundle guest tools for VMware and VirtualBox. Off by default.\n
-b Custom boot loader. Must be a .tgz containing a /boot directory compatible with the kernel on image.img. If none is specified, will use the /boot directory from the image
-g Size of the target image in GB. Must be >= size of image.img.
Additional parameters will be interpreted as scripts to run on the image. This can be used to install and configure a splash screen for the vmware and virtualbox images\n
"

while getopts "b:g:tfh" options; do
  case $options in
      b ) bootloader=$OPTARG
	  ;;
      t ) bundletools=1
	  ;;
      f ) force=1
	  ;;
      g ) imagesize="$OPTARG"
	  ;;
      h ) echo -e $USAGE
	  exit 1;;
      \? ) echo -e $USAGE
          exit 1;;
  esac
done

shift `expr $OPTIND - 1`

currimg=$1
namepfx=$2

shift
shift

sarray=("$@")

recipedir=/opt/vappio-install/recipes
utildir=/opt/vappio-util
vmxtemplate=https://svn.code.sf.net/p/vappio/code/trunk/util/start_clovr.vmx
sharedtemplate=https://svn.code.sf.net/p/vappio/code/trunk/img-conf/mnt/shared

if [ ! -f "$currimg" ]
then
    echo "Image not found $currimg"
    exit 1;
fi

if [ "$force" != "" ] || [ ! -e $currimg.vmdk ]
then

    echo "Copying $currimg to $currimg.vmbundle"
    cp --sparse=always $currimg $currimg.vmbundle
    
    if [ "$sarray" != "" ]
    then
	for b in $sarray
	do
	    if [ -f "$b" ]
	    then
		echo "Running $b on image"
		$utildir/vp-runonimg $currimg.vmbundle $b
	    else
		echo "Skipping script $b. Not found"
	    fi
	done
    fi

    if [ "$bundletools" != "" ]
    then
	echo "Bundling vmware guest tools"
	$utildir/vp-runonimg $currimg.vmbundle $recipedir/vmware.sh
	#echo "Bundling virtualbox guest tools"
	#$utildir/vp-runonimg $currimg.vmbundle $recipedir/vbox.sh
    fi

    if [ "$bootloader" = "" ]
    then
	mkdir /mnt/boot$$
	$utildir/vp-copyfromimg $currimg.vmbundle /boot /mnt/boot$$/
	pushd /mnt/boot$$
	tar cvzf /mnt/grub-boot$$.tgz boot
	popd
	rm -rf /mnt/boot$$
	bootloader=/mnt/grub-boot$$.tgz
    fi

    $utildir/vp-runonimg $currimg.vmbundle $utildir/cleanupimg
    
    $utildir/vp-create-vmdk $currimg.vmbundle $bootloader $currimg.vmdk $imagesize
    echo "Created $currimg.vmdk"
    rm -f /mnt/grub-boot$$.tgz
    rm -rf $currimg.vmbundle
fi

#Create output directory for the release
mkdir $namepfx
chmod 777 $namepfx
pushd $namepfx
#Create ovf bundle
$utildir/vp-bundle-ovf -z $currimg.vmdk $namepfx `pwd` /clovr/$namepfx

#Add vmx file
svn export --force $vmxtemplate /mnt/vmx$$.tmpl.vmx
$utildir/vp-bundle-vmx ".\/$namepfx.vmdk" /mnt/vmx$$.tmpl.vmx start_clovr.vmx $namepfx
rm -rf /mnt/vmx$$.tmpl.vmx

#Add shared folder 
svn export --force $sharedtemplate shared

chmod 777 shared
mkdir keys
chmod 777 keys
mkdir user_data
chmod 777 user_data
#vappio_conf continues to live in shared for now
mv shared/vappio-conf .
chmod 777 vappio-conf
popd

#Move files around into the $namepfx directory
echo "Moving $currimg.vmdk $namepfx/$namepfx.vmdk"
mv $currimg.vmdk $namepfx/$namepfx.vmdk

currimgbname=`basename $currimg`

#Export ovf in VBoxManage writes a compressed vmdk file We are going
#to use the original VMware compatible one instead. VMware will not
#mount rw and throws write errors, ata1 drdy err indf on the compressed vmdk
#rm -f $namepfx/$currimgbname.vmdk
rm -f $currimgbname.vmdk

#Move ovf into tar directory
mv $namepfx.ovf $namepfx/$namepfx.ovf
perl -pi -e "s/href=\".*\.vmdk\"/href=\"$namepfx.vmdk\"/" $namepfx/$namepfx.ovf

#Chmod tar directory
chmod 777 $namepfx

#Manifest file may cause problems on import
rm -f $namepfx/$namepfx.mf
sync

#Need to ignore errors from tar due to sparse files
#echo "Creating tar $namepfx.tgz"
#Sparse files cause compat problems on windows
#tar -S -cvzf $namepfx.tgz $namepfx || true
#tar -cvzf $namepfx.tgz $namepfx || true

#Zip does not support large files and 7z does not preserve file permissions
#zip -r $namepfx.zip $namepfx
