#!/bin/bash -e

USAGE="vp-bundle-diag [-f] image.img|imagedir [init script]\n
Bundles and uploads an AMI of image.img\n
Requires authentication information in the following files\n
/mnt/keys/diagcert /mnt/keys/diagkey
Use -f to force rebundle and upload even if the bucket already exists\n
If a directory imagedir is specified, looks for imagedir.img and attempts to write AMI to imagedir/clovr.conf
Will tar imagedir upon successful completion
If an init script is specified, this script is run before bundling the image
"


i=0
while getopts "fhc:k:" options; do
  case $options in
      f ) force="force"
	  i=`expr $i + 1`
	  ;;
      c ) cert="$OPTARG"
	;;
      k ) key="$OPTARG"
	  ;;
      h ) echo -e $USAGE
	  exit 1;;
    \? ) echo -e $USAGE
         exit 1;;
  esac
done
shift `expr $OPTIND - 1`

#for (( c=1; c<=$i; c++ ))
#do
#    shift
#done

if [ -d "$1" ]
then
    imagedir=$1
    image="$1.img"
else
    image=$1
fi

if [ ! -f "$image" ]
then
    echo "Can't find image $image"
    echo "$USAGE"
    exit 1
fi
if [ ! -f "$cert" ] || [ ! -f "$key" ]
then
    echo "Save diag cert and key /mnt/keys"
    echo "Can't find files: $cert, $key"
    exit 2
fi

imgname=`basename $1`
echo "Checking image $imgname"

if [ `echo "$1" | cut -d "." -f2` == "vmdk" ]
then
    if [ "$3" != "" ]
    then
	echo "Running scripts on vmdk is not supported" 2>&1
    fi
    imgname=`basename $1 .vmdk`
    imgname="${imgname}_conv"
    dirname=`dirname $1`
    pushd $dirname
    echo "Converting $1 to $imgname.img"
    qemu-img convert -O raw $1 ${imgname}.img
    #Move image out of bundle directory
    mv ${imgname}.img ../ || true
    cd ../
    image=`pwd`
    image="${image}/${imgname}.img"
    imagedir="$dirname"
    popd
else
    if [ "$3" != "" ]
    then
    #Run init script on image
	$utildir/vp-runonimg $1 $3
    fi
fi

echo "Uploading $imgname"
#Assumes running on a clovr build image
source /opt/vappio-scripts/clovrEnv.sh
export PATH=$PATH:/opt/opt-packages/nimbus-cloud-client-016/bin

utildir=/opt/vappio-util

# Setup keys
mkdir -p ~/.globus
cp $cert ~/.globus/usercert.pem
cp $key ~/.globus/uesrkey.pem

set +e
echo "Checking for image"
IMAGE_EXISTS=`cloud-client.sh --list | grep $imgname.img`
set -e
if [ ! "$IMAGE_EXISTS" = "" ] && [ "$force" = "force" ]
then
    echo "Deleting $imgname.img"
    cloud-client.sh --delete --name $imgname.img
fi

if [ ! "$IMAGE_EXISTS" = "" ] && [ ! "$force" = "force" ]
then
    rm -rf ~/.globus || true
    echo "Image is already on the cloud"
    exit 2
fi

echo "Running cloud client (output is redirected to /dev/null)"
cloud-client.sh --transfer --sourcefile $image  > /dev/null

#Cleanup
echo "Zipping image"
gzip $image
rm -rf ~/.globus || true

#Set AMI in clovr.conf if this is a clovr image
if [ -d "$imagedir" ] && [ -f "$imagedir/vappio-conf/clovr_diag.conf" ]
then
    echo "Writing $imagename.img to $imagedir/vappio-conf/clovr*.conf"
    perl -pi -e "s/^ami=.*/ami=$imgname.img/" $imagedir/vappio-conf/clovr_diag.conf
fi
echo "Bundled and uploaded image"

