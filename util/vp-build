#!/bin/bash -e

USAGE="vp-build [-o] [-z] [-t] [-c] [-g imagesize] [-s splashscript] [-b bootloader] [-d bundledir] image.img buildname buildscript1 [script2 ... scriptN]\n
 \n
 Builds new image(s) starting with image.img and running one or more build scripts\n
 Output is an image buildname.img and directory containing VMs in vmware and virtualbox formats\n
 Build scripts must either be in your path or a URLs\n
 Default build name will be buildname-$date\n
 Process uses a chroot environment, chroot image.img buildscript.sh\n
 \n 
 \n
 Example:
 vp-build /mnt/image.img clovr-standard\n
 vp-build /mnt/image.img http://url/myappname.sh\n
 \n
 -o Overwrite input image. Useful for updating an existing image. Does not make a copy of image.img, moves, mounts and overwrites.\n
 -z Compress output image.img\n
 -t Automatically bundle virtualbox or vmware tools.\n
 -c Cleanup an aborted build. Failed builds may leave mounts and loopback devices. Cleanup with vp-build -c image.img\n
 -s script to install and configure splash screen\n
 -b Custom boot loader. Must be a .tgz containing a /boot directory compatible with the kernel on image.img. If not specified, will use /boot on the image. Specify -b \"default\" to use img-conf/boot in SVN.\n
 -g Size of the target image in GB. Must be >= size of image.img
"

#
#Requires vappio utilities and vmware, vbox guest tools
#These are already installed on a clovr-build VM
#To clean up all builds on a build box
#find /mnt -name image.img -exec /opt/vappio-util/vp-build -c {} \;

handlekill() {
    kill `jobs -p` || true
    mounts=`ls -d /mnt/$$/*.live`
    for b in $mounts
    do
	umount -l $b/proc
	umount -l $b/sys
	umount -l $b/dev
	umount -l -d $b 
    done
}

#Default bootstrap script
bootstrapscript=http://vappio.svn.sourceforge.net/viewvc/vappio/trunk/vappio-install/vp-bootstrap-install
#Default build scripts directory
bundledir=/opt/vappio-install/bundles

utildir=/opt/vappio-util

while getopts "b:s:oztd:ch" options; do
  case $options in
      o ) overwrite=1
	  ;;
      z ) compress=1
	  ;;
      t ) bundletools="-t"
	  ;;
      d ) bundledir=$OPTARG
	  ;;
      s ) splashscript=$OPTARG
	  ;;
      b ) bootloader="-b $OPTARG"
	  ;;
      g ) imagesize="-s $OPTARG"
	  ;;
      c ) clear=1;;
      h ) echo -e $USAGE
	  exit 1;;
      \? ) echo -e $USAGE
         exit 1;;
  esac
done

shift `expr $OPTIND - 1`

image=$1
buildnamepfx=$2 

if [ "$image" = "" ] || [ "$buildnamepfx" = "" ]
then
    echo -e $USAGE
    exit 1;
fi

if [ "$clear" = 1 ]
then
    
    echo "Cleaning up build of $image"
    devs=`losetup -j $image | perl -ne 'm|^(/dev/loop\d+)|;print $1,"\n"'`
    for devname in $devs
    do
	mountdir=`df $devname | tail -1 | perl -ne 'split(/\s+/);print join("\t",@_)' | cut -f 6`
	if [ "$mountdir" != "/dev" ]
	then
	    echo "$image mounted as $devname,$mountdir"
	    umount -l -d $mountdir/dev || true
	    umount -l -d $mountdir/sys || true
	    umount -l -d $mountdir/proc || true
	    umount -l -d $mountdir/ || true
	fi
	losetup -d $devname || true
    done
    exit;

fi

mountpoint /mnt
if [ $? != 0 ]
then
    echo "/mnt must be an external mount with sufficient free space. mount this volume first"
    exit 1
fi

#Pull buildname from Hudson environment if running under Hudson
if [ "$BUILD_ID" != "" ]
then
    buildname=`echo "$BUILD_ID" | sed 's/_/-/'`
else
    buildname=`date "+%Y%m%d"`
fi

#Remaining arguments are build scripts, URLs
shift
shift
sarray=("$@")
#If no build scripts, try using buildname
if [ ${#sarray[@]} = 0 ]
then
    sarray[0]=$buildnamepfx
fi

#Setup to kill background jobs
trap handlekill SIGINT SIGTERM

namepfx="$buildnamepfx-$buildname"
echo "Building $namepfx"
#Set up mounts points for loopback device
if [ "$BUILD_DIR" != "" ]
then
    buildname=$BUILD_NAME
    builddir=$BUILD_DIR
    namepfx=$BUILD_NAME
    currimg=$builddir/$namepfx.img
    devname=`losetup --show -f $currimg`
    echo "Recovering build $namepfx in $builddir"
else
    builddir=/mnt/$$/$buildnamepfx
    mkdir -p $builddir
    mkdir -p $builddir.live
    currimg=$builddir/$namepfx.img
    #Copy image
    zfile=`file $image | grep gzip` || true
    if [ "$zfile" != "" ]
    then
        #Zipped sparse files provide faster copy
	image=`tar -C $builddir.live -xvzf $image` || true
	if [ -f "$builddir.live/$image" ]
	then
	    mv $builddir.live/$image $currimg
	else
	    echo "Bad compressed image $image. Can't fine $ibname in output"
	    exit 1
	fi
    else
	if [ "$overwrite" != "" ]
	then
	    echo "Moving $image to $currimg"
	    mv -f $image $currimg
	else
	    echo "Copying $image to $currimg"
	    cp --sparse=always $image $currimg
	fi
    fi
    #Set up loop back device of image
    devname=`losetup --show -f $currimg`
    mount $devname $builddir.live
    
    #Set up some things for the chroot jail
    export bundledir=$bundledir
    export b=$buildnamepfx
    mount --bind /proc $builddir.live/proc
    mount --bind /sys $builddir.live/sys
    mount --bind /dev $builddir.live/dev
    mkdir -p $builddir.live/dev/pts
    mount -t devpts devpts $builddir.live/dev/pts
    touch $builddir.live/var/run/utmp
    touch $builddir.live/var/run/btmp
    touch $builddir.live/var/run/wtmp
    touch $builddir.live/var/run/lastlog
    chgrp -v utmp $builddir.live/var/run/utmp $builddir.live/var/log/lastlog
    chmod -v 664 $builddir.live/var/run/utmp $builddir.live/var/log/lastlog
    #Set up resolv.conf so networking works in chroot
    cp /etc/resolv.conf $builddir.live/etc/resolv.conf
    #chroot experiences dns problems with default conf. try using files dns
    cp /etc/nsswitch.conf $builddir.live/etc/nsswitch.conf
    cp /etc/hostname $builddir.live/etc/hostname
    cp /etc/apt/sources.list.orig $builddir.live/etc/apt/sources.list
    #Set up apt proxy to speed up downloads
    mkdir -p  $builddir.live/etc/apt.conf.d
    #Check for apt proxy for local caching of apt packages
    set +e
    curl http://localhost:3142 > /dev/null
    if [ $? = 0 ]
    then
	echo p | svn export --force https://vappio.svn.sourceforge.net/svnroot/vappio/trunk/img-conf/etc/apt/apt.conf.d/01proxy $builddir.live/etc/apt/apt.conf.d/01proxy
    fi
    set -e 
    
    #Download and run bootstrap script
    #This will pull the latest recipes from SVN for the build
    wget -c -P $builddir.live/tmp $bootstrapscript
    bscript=`basename $bootstrapscript`
    chroot $builddir.live bash -e /tmp/$bscript
    #Save build metadata in /etc/vappio
    mkdir -p $builddir.live/etc/vappio
    echo "$buildnamepfx" > $builddir.live/etc/vappio/bundle_name.info
    touch $builddir.live/etc/vappio/build_scripts.info
fi

for b in $sarray
do
    bname=`basename $b`
    #Apply build script to the image
    if [ -f "$bundledir/$b" ]
    then
	#Argument is a script
	cp $bundledir/$b $builddir.live/$bundledir/$b
    else
	if [ -f "$b" ]
	then
	    #Argument is a script
	    cp $b $builddir.live/$bundledir/$b
	else
	    #Check if argument is a url
	    wget -c -P $bundledir.live/$bundledir $b
	fi
    fi
    chroot $builddir.live $bundledir/$bname    
    echo "Storing build info $namepfx $b"
    echo "$b" >> $builddir.live/etc/vappio/build_scripts.info
    sync
done

#Reset hostname
#echo -n > $builddir.live/etc/hostname
#Cleanup the proxy
rm -f $builddir.live/etc/apt/apt.conf.d/01proxy

#Store additional build meta data
echo "$namepfx" > $builddir.live/etc/vappio/release_name.info
date "+%Y%m%d-%H%M%S" > $builddir.live/etc/vappio/build_time.info
sync
#Exit from chroot
umount -l $builddir.live/dev/pts
umount -l $builddir.live/proc
umount -l $builddir.live/sys
umount -l $builddir.live/dev
umount -l $builddir.live
sync
losetup -d $devname || true
#cleanup img, removing tmp files
echo "Cleaning image $currimg"
$utildir/vp-runonimg $currimg $utildir/cleanupimg
#DIAG and Nimbus clusters require no hostname
#EC2 ignores and resets your hostname
$utildir/vp-runonimg $currimg $utildir/erasehostname

#Raw disk image is ready
echo "Created raw disk image $currimg"

#if [ "$bootloader" = "default" ]
#then
#    svn export --force  https://vappio.svn.sourceforge.net/svnroot/vappio/trunk/img-conf/boot /mnt/boot
#    pushd /mnt
#    tar cvzf grub-boot.tgz boot
#    popd
#    bootloader="-b /mnt/grub-boot.tgz"
#fi

#Build VMware/VBox release images
$utildir/vp-bundle-release $imagesize $bundletools $bootloader $currimg $namepfx $splashscript 
mv $currimg $namepfx.img
if [ "$compress" != "" ]
then
    #Compress raw img
    $utildir/vp-compress-img $namepfx.img $namepfx.img.tgz || true
    #Cleanup tmp dir
    rm -rf /mnt/$$/
fi


