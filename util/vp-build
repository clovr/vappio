#!/bin/bash -e

USAGE="vp-build image.img bundlename1 name2 ... namen\n
 Or to use custom build scripts outside of vappio,\n
 vp-build image.img [-d bundledir] [-b http://urltobootstrapscript] bundlename1 name2 ... namen\n

 Build new image(s) starting with image.img and running a build script named bundledir/bundlename1-N\n
 Output is one or more directories containing VMs in raw, vmware, and vmx formats\n
 Requires build scripts named bundlename1 that are either on the starting image or installed via bootstrapscript\n
 Bootstrapscript can be a URL to an SVN repository\n
 Performs an equivalent of\n
 chroot image.img 'curl bootstrapscript'\n
 chroot image.img bundledir/bundlename1\n
 Default build name will be bundlename-$date\n
 \n 
 \n
 Example:
 vp-build /mnt/image.img clovr-standard
 \n
 To cleanup an aborted build run\n 
 vp-build -c image.img\n
 \n
"

#
#Takes a skeleton image (image.img) and applies build scripts name1 ... namen
#creating one output directory per image
#Requires vappio utilities and vmware, vbox guest tools
#These are already installed on a clovr-build VM

#Failed builds may leave mounts and loopback devices
#To cleanup, run
#vp-build [-c cleanup bad build] image.img

#To clean up all builds on a build box
#find /mnt -name image.img -exec /opt/vappio-util/vp-build -c {} \;

handlekill() {
    kill `jobs -p` || true
    mounts=`ls -d /mnt/$$/*.live`
    for b in $mounts
    do
	umount -l $b/proc
	umount -l $b/sys
	umount -l $b/dev
	umount -l -d $b 
    done
}

#Default bootstrap script
bootstrapscript=http://vappio.svn.sourceforge.net/viewvc/vappio/trunk/vappio-install/vp-bootstrap-install
#Default build scripts directory
bundledir=/opt/vappio-install/bundles

utildir=/opt/vappio-util

while getopts "cdh" options; do
  case $options in
    d ) bundledir=$OPTARG
	  shift
	  ;;
    c ) clear=1
	  shift;;
    h ) echo -e $USAGE
	  exit 1;;
    \? ) echo -e $USAGE
         exit 1;;
  esac
done

image=$1

if [ "$image" = "" ]
then
    echo -e $USAGE
    exit 1;
fi

if [ "$clear" = 1 ]
then
    
    echo "Cleaning up build of $image"
    devs=`losetup -j $image | perl -ne 'm|^(/dev/loop\d+)|;print $1,"\n"'`
    for devname in $devs
    do
	mountdir=`df $devname | tail -1 | perl -ne 'split(/\s+/);print join("\t",@_)' | cut -f 6`
	if [ "$mountdir" != "/dev" ]
	then
	    echo "$image mounted as $devname,$mountdir"
	    umount -l -d $mountdir/dev || true
	    umount -l -d $mountdir/sys || true
	    umount -l -d $mountdir/proc || true
	    umount -l -d $mountdir/ || true
	fi
	losetup -d $devname || true
    done
    exit;

fi

mountpoint /mnt
if [ $? != 0 ]
then
    echo "/mnt must be an external mount with sufficient free space. mount this volume first"
    exit 1
fi

#Pull buildname from Hudson environment if running under Hudson
if [ "$BUILD_ID" != "" ]
then
    buildname=`echo "$BUILD_ID" | sed 's/_/-/'`
else
    buildname=`date "+%Y%m%d"`
fi

#Remaining arguments are bundle names
shift

#Setup to kill background jobs
trap handlekill SIGINT SIGTERM

for b in $*
do
    namepfx="$b-$buildname"
    i=1
    while [ -d "$namepfx" ]
    do
	i=`expr $i + 1`;
	namepfx="$b-$buildname-$i"
    done
    echo "Building $namepfx from script $bundledir/$b"
    #Set up mounts points for loopback device
    if [ "$BUILD_DIR" != "" ]
    then
	builddir=$BUILD_DIR
	currimg=$builddir/$namepfx.img
	namepfx=$BUILD_NAME
	echo "Recovering build $namepfx in $builddir"
    else
	builddir=/mnt/$$/$b
	mkdir -p $builddir
	mkdir -p $builddir.live
	currimg=$builddir/$namepfx.img
        #Copy image
	zfile=`file $image | grep gzip` || true
	if [ "$zfile" != "" ]
	then
        #Zipped sparse files provide faster copy
	    image=`tar -C $builddir.live -xvzf $image` || true
	    if [ -f "$builddir.live/$image" ]
	    then
		mv $builddir.live/$image $currimg
	    else
		echo "Bad compressed image $image. Can't fine $ibname in output"
		exit 1
	    fi
	else
	    echo "Copying $image to $currimg"
	    cp --sparse=always $image $currimg
	fi
        #Set up loop back device of image
	devname=`losetup --show -f $currimg`
	mount $devname $builddir.live
	
        #Set up some things for the chroot jail
	export bundledir=$bundledir
	export b=$b
	mount --bind /proc $builddir.live/proc
	mount --bind /sys $builddir.live/sys
	mount --bind /dev $builddir.live/dev
#	mount -t devpts devpts $builddir.live/devpts
	touch $builddir.live/var/run/utmp
	touch $builddir.live/var/run/btmp
	touch $builddir.live/var/run/wtmp
	touch $builddir.live/var/run/lastlog
	chgrp -v utmp $builddir.live/var/run/utmp $builddir.live/var/log/lastlog
	chmod -v 664 $builddir.live/var/run/utmp $builddir.live/var/log/lastlog
        #Set up resolv.conf so networking works in chroot
	cp /etc/resolv.conf $builddir.live/etc/resolv.conf
	cp /etc/hostname $builddir.live/etc/hostname
	cp /etc/apt/sources.list.orig $builddir.live/etc/apt/sources.list
        #Set up apt proxy to speed up downloads
	mkdir -p  $builddir.live/etc/apt.conf.d
        #Check for apt proxy for local caching of apt packages
	set +e
	curl http://localhost:3142 > /dev/null
	set -e 
	if [ $? = 0 ]
	then
	    svn export --force https://vappio.svn.sourceforge.net/svnroot/vappio/trunk/img-conf/etc/apt/apt.conf.d/01proxy $builddir.live/etc/apt/apt.conf.d/01proxy
	fi
	
        #Download and run bootstrap script
	#This will pull the latest recipes from SVN for the build
	wget -c -P $builddir.live/tmp $bootstrapscript
	bscript=`basename $bootstrapscript`
	chroot $builddir.live bash -e /tmp/$bscript
    fi
    #Apply build script to the image
    cp $bundledir/$b $builddir.live/$bundledir/$b
    chroot $builddir.live $bundledir/$b    
    sync

    #Remove apt proxy
    rm -f $builddir.live/etc/apt/apt.conf.d/01proxy
    #Reset hostname
    echo -n > $builddir.live/etc/hostname

    #Store build name
    echo "Storing build info $namepfx $b"
    mkdir -p $builddir.live/etc/vappio/
    echo "$namepfx" > $builddir.live/etc/vappio/release_name.info
    echo "$b" > $builddir.live/etc/vappio/bundle_name.info
    date "+%Y%m%d-%H%M%S" > $builddir.live/etc/vappio/build_time.info
    sync
    #Exit from chroot
    umount -l $builddir.live/proc
    umount -l $builddir.live/sys
    umount -l $builddir.live/dev
    umount -l $builddir.live
    sync
    losetup -d $devname || true
    #cleanup img, removing tmp files
    echo "Cleaning image $currimg"
    $utildir/vp-runonimg $currimg $utildir/cleanupimg

    #Build xen
    #create example clovr-xen.conf and bundle kernel image
    echo "Created raw disk image $currimg"

    #Build VMware/VBox
    $utildir/vp-bundle-release $currimg $namepfx
    mv $currimg $namepfx.img
    #Compress img
    $utildir/vp-compress-img $namepfx.img $namepfx.img.tgz || true
    #Cleanup tmp dir
    rm -rf /mnt/$$/
done

