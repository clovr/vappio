#!/bin/bash -e

USAGE="vp-build image.img bundlename1 name2 ... namen\n
 Or to use custom build scripts outside of vappio,\n
 vp-build image.img [-d bundledir] [-b http://urltobootstrapscript] bundlename1 name2 ... namen\n

 Build new image(s) starting with image.img and running a build script named bundledir/bundlename1-N\n
 Output is one or more directories containing VMs in raw, vmware, and vmx formats\n
 Requires build scripts named bundlename1 that are either on the starting image or installed via bootstrapscript\n
 Bootstrapscript can be a URL to an SVN repository\n
 Performs an equivalent of\n
 chroot image.img `curl bootstrapscript`\n
 chroot image.img bundledir/bundlename1\n
 Default build name will be bundlename-$date\n
 \n 
 \n
 Example:
 vp-build /mnt/image.img clovr-standard
 \n
 To cleanup an aborted build run\n 
 vp-build -c image.img\n
 \n
"

#
#Takes a skeleton image (image.img) and applies build scripts name1 ... namen
#creating one output directory per image
#Requires vappio utilities and vmware, vbox guest tools
#These are already installed on a clovr-build VM

#Failed builds may leave mounts and loopback devices
#To cleanup, run
#vp-build [-c cleanup bad build] image.img

#To clean up all builds on a build box
#find /mnt -name image.img -exec /opt/vappio-util/vp-build -c {} \;

handlekill() {
    kill `jobs -p` || true
    mounts=`ls -d /mnt/$$/*.live`
    for b in $mounts
    do
	umount $b/proc || true
	umount $b/sys || true
	umount $b/dev || true
	umount -d $b || true
    done
}

#Default bootstrap script
bootstrapscript=http://vappio.svn.sourceforge.net/viewvc/vappio/trunk/vappio-install/vp-bootstrap-install
#Default build scripts directory
bundledir=/opt/vappio-install/bundles

utildir=/opt/vappio-util

while getopts "cdh" options; do
  case $options in
    d ) bundledir=$OPTARG
	  shift
	  ;;
    c ) clear=1
	  shift;;
    h ) echo -e $USAGE
	  exit 1;;
    \? ) echo -e $USAGE
         exit 1;;
  esac
done

image=$1

if [ "$image" = "" ]
then
    echo -e $USAGE
    exit 1;
fi

if [ "$clear" = 1 ]
then
    
    echo "Cleaning up build of $image"
    devs=`losetup -j $image | perl -ne 'm|^(/dev/loop\d+)|;print $1,"\n"'`
    for devname in $devs
    do
	mountdir=`df $devname | tail -1 | perl -ne 'split(/\s+/);print join("\t",@_)' | cut -f 6`
	if [ "$mountdir" != "/dev" ]
	then
	    echo "$image mounted as $devname,$mountdir"
	    umount -d $mountdir/dev || true
	    umount -d $mountdir/sys || true
	    umount -d $mountdir/proc || true
	    umount -d $mountdir/ || true
	fi
	losetup -d $devname || true
    done
    exit;

fi

mountpoint /mnt
if [ $? != 0 ]
then
    echo "/mnt must be an external mount with sufficient free space. mount this volume first"
    exit 1
fi

#Pull buildname from Hudson environment if running under Hudson
if [ "$BUILD_ID" != "" ]
then
    buildname=`echo "$BUILD_ID" | sed 's/_/-/'`
else
    buildname=`date "+%Y%m%d"`
fi

#Remaining arguments are bundle names
shift

#Setup to kill background jobs
trap handlekill SIGINT SIGTERM

for b in $*
do
    namepfx="$b-$buildname"
    i=1
    while [ -d "$namepfx" ]
    do
	i=`expr $i + 1`;
	namepfx="$b-$buildname-$i"
    done
    echo "Building $namepfx from script $bundledir/$b"
    #Set up mounts points for loopback device
    mkdir -p /mnt/$$/$b
    mkdir -p /mnt/$$/$b.live
    currimg=/mnt/$$/$b/$namepfx.img
    #Copy image
    zfile=`file $image | grep gzip` || true
    if [ "$zfile" != "" ]
    then
        #Zipped sparse files provide faster copy
	image=`tar -C /mnt/$$/$b.live -xvzf $image` || true
	if [ -f "/mnt/$$/$b.live/$image" ]
	then
	    mv /mnt/$$/$b.live/$image $currimg
	else
	    echo "Bad compressed image $image. Can't fine $ibname in output"
	    exit 1
	fi
    else
	echo "Copying $image to $currimg"
	cp --sparse=always $image $currimg
    fi
    #Set up loop back device of image
    devname=`losetup --show -f $currimg`
    mount $devname /mnt/$$/$b.live

    #Set up some things for the chroot jail
    export bundledir=$bundledir
    export b=$b
    mount --bind /proc /mnt/$$/$b.live/proc
    mount --bind /sys /mnt/$$/$b.live/sys
    mount --bind /dev /mnt/$$/$b.live/dev
    touch /mnt/$$/$b.live/var/run/utmp 
    touch /mnt/$$/$b.live/var/run/btmp
    touch /mnt/$$/$b.live/var/run/wtmp
    touch /mnt/$$/$b.live/var/run/lastlog
    chgrp -v utmp /mnt/$$/$b.live/var/run/utmp /mnt/$$/$b.live/var/log/lastlog
    chmod -v 664 /mnt/$$/$b.live/var/run/utmp /mnt/$$/$b.live/var/log/lastlog
    #Set up resolv.conf so networking works in chroot
    cp /etc/resolv.conf /mnt/$$/$b.live/etc/resolv.conf
    cp /etc/hostname /mnt/$$/$b.live/etc/hostname
    cp /etc/apt/sources.list.orig /mnt/$$/$b.live/etc/apt/sources.list
    #Set up apt proxy to speed up downloads
    mkdir -p  /mnt/$$/$b.live/etc/apt.conf.d
    #Check for apt proxy for local caching of apt packages
    curl http://localhost:3142 > /dev/null
    if [ $? = 0 ]
    then
	svn export --force https://vappio.svn.sourceforge.net/svnroot/vappio/trunk/img-conf/etc/apt/apt.conf.d/01proxy /mnt/$$/$b.live/etc/apt/apt.conf.d/01proxy
    fi

    #Download and run bootstrap script
    wget -c -P /mnt/$$/$b.live/tmp $bootstrapscript
    chroot /mnt/$$/$b.live bash -e /tmp/`basename bootstrapscript`
    #Apply build script to the image
    chroot /mnt/$$/$b.live $bundledir/$b
    
    #Remove apt proxy
    rm -f /mnt/$$/$b.live/etc/apt/apt.conf.d/01proxy
    #Reset hostname
    echo -n > /mnt/$$/$b.live/etc/hostname

    #Store build name
    mkdir -p /mnt/$$/$b.live/etc/vappio/
    echo "$namepfx" > /mnt/$$/$b.live/etc/vappio/release_name
    echo "$b" > /mnt/$$/$b.live/etc/vappio/bundle_name
    date "+%Y%m%d-%H%M%S" > /mnt/$$/$b.live/etc/vappio/build_time

    #Exit from chroot
    umount /mnt/$$/$b.live/proc
    umount /mnt/$$/$b.live/sys
    sleep 2
    umount /mnt/$$/$b.live/dev
    sleep 2
    umount /mnt/$$/$b.live
    sync
    losetup -d $devname
    #cleanup img, removing tmp files
    echo "Cleaning image $currimg"
    $utildir/vp-runonimg $currimg $utildir/cleanupimg

    #Build xen
    #create example clovr-xen.conf and bundle kernel image
    echo "Created raw disk image $currimg"

    #Build VMware/VBox
    $utildir/vp-bundle-release $currimg $namepfx
    mv $currimg $namepfx.img
    #Compress img
    $utildir/vp-compress-img $namepfx.img $namepfx.img.tgz || true
    #Cleanup tmp dir
    rm -rf /mnt/$$/
done

