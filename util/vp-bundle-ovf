#!/bin/bash

USAGE="vp-bundle-ovf [-z] [-s] image.vmdk name outputprefix sharedpath\n
Converts image.vmdk to Virtualbox compatible formats.\n
An OVF file with $outputprefix.ovf that can import the VMDK\n
A VDI file with outputprefix.vdi\n
-s skip creation of VDI file\n
-z compress vdi
"

while getopts "hzs" options; do
  case $options in
      z ) compress=1
	  shift
	  ;;
      s ) skipvdi=1
	  shift
	  ;;
      h ) echo -e $USAGE
	  exit 1;;
      \? ) echo -e $USAGE
          exit 1;;
  esac
done

rm -rf /root/.VirtualBox
rm -rf /mnt/.VirtualBox
mkdir -p /mnt/.VirtualBox
ln -f -s /mnt/.VirtualBox /root/.VirtualBox

#Clean up any old vms with the same name

VBoxManage -q closemedium disk $1
VBoxManage -q unregistervm $2 

rm -rf ~/.VirtualBox/Machines/$2

VBoxManage -q createvm --name $2 --register

VBoxManage -q modifyvm $2 --ostype "Ubuntu_64" --memory 2048 --boot1 disk --nic1 bridged 

#For debugging while in beta, enable remote desktop
#VBoxManage -q modifyvm $2 --vrdp on --vrdpmulticon on

#VBoxManage -q storagectl $2 --name "IDE Controller" --add ide
#VBoxManage -q storageattach $2 --storagectl "IDE Controller" --port 0 --device 0 --type hdd --medium $1
echo "Attaching SATA drive"
VBoxManage -q storagectl $2 --name "SATA Controller" --add sata --controller IntelAhci
VBoxManage -q storageattach $2 --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium $1

#Not certain this is portable
echo "Attaching network device"
VBoxManage -q modifyvm $2 --nic1 bridged --bridgeadapter1 "en0:Ethernet"

if [ "$4" != "" ]
then
    echo "Specifying shared folders"
    VBoxManage sharedfolder add $2 --name shared --hostpath $4/shared/ 
    VBoxManage sharedfolder add $2 --name keys --hostpath $4/keys/ 
    VBoxManage sharedfolder add $2 --name user_data --hostpath $4/user_data/
    #VBoxManage sharedfolder add $2 --name pg_data --hostpath $4/pg_data/
fi

echo "Creating ovf"
#Create ovf
#rm -rf $3.ovf
#VBoxManage export $2 -o $3.ovf

if [ "$skipvdi" = "" ]
then
#To create VDI
    echo "Creating vdi"
    #vdibname=`basename $1`
    #vdidirname=`dirname $1`
    vdibname=$2
        
    #VBoxManage -q closemedium disk $1
    VBoxManage internalcommands sethduuid $1
    
    #rm -f /root/.VirtualBox/HardDisks/$vdibname.vdi
    rm -f /mnt/${vdibname}.vdi
    VBoxManage createhd --filename /mnt/$vdibname.vdi --size 500000 --format vdi
    VBoxManage clonehd --existing $1 /mnt/$vdibname.vdi 
    #Need to create new second partition on the vdi
    modprobe nbd max_part=16
    qemu-nbd -d /dev/nbd0
    qemu-nbd -c /dev/nbd0 /mnt/$vdibname.vdi 
    sleep 2
    fdisk /dev/nbd0 <<EOF
n
p
2


w
EOF
    #Format the new partition as ext3
    mkfs.ext3 /dev/nbd0p2
    qemu-nbd -d /dev/nbd0
    /opt/vappio-util/vp-runonvdi /mnt/$vdibname.vdi /opt/vappio-scripts/vbox/vboxshared.sh 2
    
    #VBoxManage createhd --filename /mnt/$vdibname.copy.vdi --size 500000 --format vdi
    
    #This currently crashes
    #qemu-nbd -c /dev/nbd0 /mnt/$vdibname.vdi 
    #sleep 2
    #zerofree /dev/nbd0p1
    #zerofree /dev/nbd0p2
    #qemu-nbd -d /dev/nbd0
    VBoxManage openmedium /mnt/$vdibname.vdi 
    VBoxManage modifyvdi /mnt/$vdibname.vdi compact
    VBoxManage closemedium /mnt/$vdibname.vdi 
    ##OVF export will force conversion to VMDK so skipping for now
    #pushd ${vdibname}_vdi
    #echo "Running ovf export"
    #VBoxManage export ${2}_vdi -o ${3}_vdi.ovf

    if [ "$compress" != "" ]
    then
	echo "Compressing vdi"
	gzip /mnt/$vdibname.vdi
    fi
fi


