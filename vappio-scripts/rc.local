#!/bin/sh
# Ubuntu doesn't use /etc/rc.local
# https://help.ubuntu.com/community/RcLocalHowto

### BEGIN INIT INFO
# Provides:             rc.local
# Required-Start:       
# Required-Stop:        
# Default-Start:        2 3 4 5
# Default-Stop:         0 6
# Short-Description:    Locals tartup
### END INIT INFO

source /root/clovrEnv.sh

do_start() {
    mkdir -p $vappio_runtime
    chmod 777 $vappio_runtime
    touch $vappio_log
    chmod 777 $vappio_log
    echo -n "CloVR VM " > /etc/issue
    cat /opt/CLOVR-RELEASE >> /etc/issue
    echo "Running on Ubuntu Linux 9.04 \n \l" >> /etc/issue
    echo " " >> /etc/issue
    netcount=$(/sbin/ifconfig | grep -o "inet")
    if [[ $netcount > 1 ]]
    then
	echo "To use this appliance, please use a web browser" >> /etc/issue
	echo "from another system to navigate to " >> /etc/issue
	echo " " >> /etc/issue
	/sbin/ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{ print $2 }' | awk -F: '{ print "http://"$2"/" }' >> /etc/issue
	echo " " >> /etc/issue       
    else
	echo "This appliance does not have networking configured.  Please log in to configure networking" >> /etc/issue
    fi
    
    ##
    # Input a link to an external website to reference
    echo "For more information regarding this appliance, please visit" >> /etc/issue
    echo "http://clovr.sf.net" >> /etc/issue
    echo " " >> /etc/issue
    
    if [ -f "/var/nimbus-metadata-server-url" ]
    then
	vlog "vappio_cloud_type=NIMBUS"
	export vappio_cloud_type=NIMBUS
	echo "NIMBUS" > $vappio_runtime/cloud_type
	$vappio_scripts/nimbus/start_nimbus.sh
    else
    ##
    # If vmware-checkvm returns 1 we know we are not on VMware
	vmware-checkvm
	if [ $? = "0" ]
	then
        #In vmware
            vlog "vappio_cloud_type=vmware"
            export vappio_cloud_type=vmware
            echo "VMware" > $vappio_runtime/cloud_type
            $vappio_scripts/vmware/start_vmware.sh
	else
        # If this curl fails it means we are not on EC2 (hopefully)
	    curl --connect-timeout 30 --retry 3 --silent --show-error --fail http://169.254.169.254/latest/meta-data/ > /dev/null
	    if [ $? = "0" ]
	    then
		vlog "vappio_cloud_type=EC2"
		export vappio_cloud_type=EC2
		echo "EC2" > $vappio_runtime/cloud_type
		$vappio_scripts/amazonec2/start_ec2.sh
		$vappio_scripts/create_swap_file.sh
            else
		vlog "vappio_cloud_type=XEN"
		export vappio_cloud_type=XEN
		echo "XEN" > $vappio_runtime/cloud_type
            fi
	fi
    fi

    #This needs to move till after ganglia is configured
    #vappio_node_type=`cat $vappio_runtime/node_type`
    #vappio_cloud_type=`cat $vappio_runtime/cloud_type`
    #gmetric -n NODE_TYPE -v "$vappio_node_type" -t string -c /usr/local/stow/ganglia/etc/gmond.conf
    #gmetric -n CLOUD_TYPE -v "$vappio_cloud_type" -t string -c /usr/local/stow/ganglia/etc/gmond.conf

    #Check for devel1.pem
    if [ -f "$ssh_key" ] 
    then
	echo "Found ssh key"
	chmod 600 $ssh_key
	chown www-data:www-data $ssh_key
    else
	echo "WARNING: SSH key $ssh_key not found. Grid may not work properly."
    fi

    ##
    #To support ad-hoc virtual clusters, 
    #set up mock hostname if we don't have one, using the clovr-IPADDR naming convention
    #This is required so that SGE can run locally without problems
    hostname -f
    if [ $? != "0" ]
    then
	ipaddr=`/sbin/ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{ print $2 }' | awk -F: '{ print ""$2"" }'`
	ipalias=`echo $ipaddr | sed -e 's/\./-/g'`;
	hostname clovr-$ipalias
	cp /etc/hosts.orig /etc/hosts
	echo "$ipaddr clovr-$ipalias clovr-$ipalias" >> /etc/hosts
	touch $vappio_runtime/no_dns
    fi
    touch $vappio_log  
    chmod 666 $vappio_log
}

do_stop() {
    ##
    #Stop node services if still running
    case `cat $vappio_runtime/node_type` in
	MASTER_NODE) 
	    echo "Node is MASTER_NODE. Shutting down"
	    $vappio_scripts/stop_master.sh
	    ;;
	EXEC_NODE) 
	    echo "Node is EXEC_NODE. Shutting down"
	    $vappio_scripts/stop_exec.sh
	    ;;
	DATA_NODE) 
	    echo "Node is DATA_NODE. Shutting down"
	    $vappio_scripts/stop_data.sh
	    ;;
	OFFLINE) 
	    echo "Node is OFFLINE. Shutting down"
	    ;;
    esac

    ##
    # Run node shutdown script
    shutdownNode.py

    ##
    # Delete this if we are a nimbus node, won't exist if we aren't
    rm /var/nimbus-metadata-server-url

    ##
    # Remove any subversions tuff
    rm -rf /root/.svn
    rm -rf /root/.subversion

    ##
    # Don't want people having our SSH keys
#KEEPING THESE FOR NOW,NEEDED FOR VMWARE CLUSTERS
#rm -f /root/.ssh/authorized_keys
#rm /mnt/devel1.pem
    rm -f /root/.ssh/known_hosts
    ##
    # Logs just take up space and are not needed 
    rm -f /var/log/*.log
    rm -f /var/log/*.gz
    rm -f /var/log/dmesg.*
    rm -f /var/log/apache2/*
    rm -f /var/log/lastlog

    rm -rf /root/.cpan
    rm -f /root/.bash_history
    rm -f /root/.lesshst
    rm -f /root/.Xauthority
    rm -rf /root/.aptitude
    rm -rf /root/.debtags
    rm -f /root/.vimrc
    rm -f /root/.viminfo
    rm -f /root/.viminfo
    rm -f /root/.gnupg

    ##
    # Remove ergatis logs
    rm -rf /opt/ergatis/global_id_repository/logs/*

    ##
    #Recover a naked hosts file
    cp /etc/hosts.orig /etc/hosts
    
    #Recover a naked udev rules file for VMware.  VMware will continue to
    #add new network cards if this file is saved between runs.
    cp /etc/udev/rules.d/70-persistent-net.rules.orig /etc/udev/rules.d/70-persistent-net.rules

    #TODO, save data if running under vmware
    #for p in $harvesting_dir $staging_dir $wfworking_dir $scratch_dir /var/spool/sge /mnt/projects/clovr
    #do
    #echo "Removing directory $p"
    #rm -rf $p
    #done
}

# Import vappio config
vappio_scripts=/opt/vappio-scripts
source $vappio_scripts/vappio_config.sh

case "$1" in
    start)
	do_start
	;;
    stop)
	do_stop
	;;
    *)
	echo $"Usage: $0 {start|stop}"
	exit 1
esac

exit $?
